import React, { useState, useRef } from "react";
import {
  Box,
  Container,
  Typography,
  Button,
  Divider,
  TableContainer,
  Paper,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
} from "@mui/material";
import KeyboardArrowRightIcon from "@mui/icons-material/KeyboardArrowRight";
import KeyboardArrowLeftIcon from "@mui/icons-material/KeyboardArrowLeft";
import TrainingCalendar from "../components/TrainingCalendar";
import ChatGPTAssistant from "../components/ChatGPTAssistant";

const getCurrentWeek = (): number => {
  const now = new Date();
  const startOfYear = new Date(now.getFullYear(), 0, 1);
  const pastDays = Math.floor(
    (now.getTime() - startOfYear.getTime()) / (24 * 60 * 60 * 1000)
  );
  return Math.ceil((pastDays + startOfYear.getDay() + 1) / 7);
};

const Training: React.FC = () => {
  const [trainings, setTrainings] = useState<any>({});
  const [evaluation, setEvaluation] = useState<string>("");
  const [suggestion, setSuggestion] = useState<any>(null);
  const [week, setWeek] = useState<number>(getCurrentWeek());
  const [year, setYear] = useState<number>(new Date().getFullYear());
  const trainingCalendarRef = useRef<any>(null);

  const handleWeekChange = (change: number) => {
    setWeek((prevWeek) => {
      setEvaluation("");
      setSuggestion(null);
      return prevWeek + change;
    });
  };

  return (
    <Container maxWidth="xl">
      <Box component="section" sx={{ p: 2 }}>
        <Typography variant="h4" gutterBottom align="center">
          Tr√©ninkov√Ω pl√°n ‚Äì T√Ωden {week}, Rok {year}
        </Typography>
        <Box sx={{ display: "flex", justifyContent: "space-between", mt: 2 }}>
          <Button
            variant="contained"
            sx={{ borderRadius: "16px" }}
            startIcon={<KeyboardArrowLeftIcon />}
            onClick={() => handleWeekChange(-1)}
            disabled={week === 1}
          >
            P≈ôedchoz√≠ t√Ωden
          </Button>
          <Button
            variant="contained"
            sx={{ borderRadius: "16px", ml: 2 }}
            endIcon={<KeyboardArrowRightIcon />}
            onClick={() => handleWeekChange(1)}
          >
            Dal≈°√≠ t√Ωden
          </Button>
        </Box>
      </Box>

      <TrainingCalendar
        ref={trainingCalendarRef}
        week={week}
        year={year}
        onTrainingsChange={(data) => setTrainings(data)}
      />

      <Divider sx={{ my: 4 }} />

      <Box sx={{ mb: 6 }}>
        <Typography variant="h5" gutterBottom>
          üß† Pomocn√≠k ChatGPT
        </Typography>
        <Box display="flex" gap={2} mt={2} flexWrap="wrap">
          <ChatGPTAssistant
            endpoint="chatgpt"
            data={trainings}
            systemPrompt={`Jsi zku≈°en√Ω fitness tren√©r. Vyhodno≈• n√°sleduj√≠c√≠ t√Ωdenn√≠ tr√©ninkov√Ω pl√°n.

              1. Pro KA≈ΩD√ù DEN urƒç:
                 - **intenzitu** tr√©ninku (n√≠zk√° / st≈ôedn√≠ / vysok√°),
                 - **typ zat√≠≈æen√≠** (s√≠la, kardio, regenerace, odpoƒçinek),
                 - p≈ô√≠padnƒõ dopl≈à koment√°≈ô k z√°tƒõ≈æi nebo kvalitƒõ dne.
              
              2. Na Z√ÅVƒöR poskytn:
                 - celkov√© zhodnocen√≠ t√Ωdne (rovnov√°ha z√°tƒõ≈æe, p≈ô√≠padn√° p≈ôet√≠≈æen√≠ nebo mezery),
                 - **doporuƒçen√≠** na zlep≈°en√≠ (nap≈ô. za≈ôadit v√≠ce kardio, p≈ôidat regeneraci, sn√≠≈æit p≈ôet√≠≈æen√≠, atd.),
                 - n√°vrh zmƒõn v p≈ô√≠padƒõ, ≈æe nƒõco chyb√≠ nebo se opakuje p≈ô√≠li≈° ƒçasto.
              
              Buƒè konkr√©tn√≠ a praktick√Ω. Vyhodnocen√≠ strukturovanƒõ se≈ôaƒè podle dn√≠ (pondƒõl√≠ a≈æ nedƒõle) a n√°slednƒõ napi≈° celkov√Ω z√°vƒõr.`}              
            label="Vyhodnotit tr√©ninkov√Ω pl√°n"
            onResponse={(result) => {
              if (typeof result === "string") {
                setEvaluation(result);
              } else {
                setEvaluation(JSON.stringify(result, null, 2));
              }
            }}
          />

          <ChatGPTAssistant
            endpoint="chatgpt"
            data={trainings}
            systemPrompt={`Jsi fitness tren√©r. Na z√°kladƒõ n√≠≈æe uveden√©ho t√Ωdenn√≠ho tr√©ninkov√©ho pl√°nu vytvo≈ô UPRAVEN√ù pl√°n tak, ≈æe:
              1. Zachov√°≈° v≈°echny ji≈æ vyplnƒõn√© ƒç√°sti ‚Äì NESM√ç≈† je mƒõnit.
              2. Dopl≈à pouze chybƒõj√≠c√≠ ƒç√°sti tak, aby byl pl√°n vyv√°≈æen√Ω ‚Äì kombinuj s√≠lu, kardio a regeneraci.
              3. Nepou≈æ√≠vej v√Ωpl≈àov√© znaky jako '-', '...', 'N/A'.
              4. Pokud nen√≠ aktivita, dopl≈à nap≈ô. "regenerace", "prota≈æen√≠", "odpoƒçinek", "lehk√Ω bƒõh", atd.
              5. V√Ωstup vra≈• jako validn√≠ JSON ve form√°tu:
              {
                "Pondƒõl√≠": {
                  "main": "...",
                  "evening": "...",
                  "morning": "..."
                },
                "√öter√Ω": { ... },
                ...
              }`}
            label="Navrhnout vylep≈°en√Ω pl√°n"
            onResponse={(result) => {
              if (typeof result === "object") {
                setSuggestion(result);
              }
            }}
          />
        </Box>

        {evaluation && (
          <Paper elevation={3} sx={{ p: 3, mt: 4 }}>
            <Typography variant="h6" gutterBottom>
              üß™ Hodnocen√≠ tr√©ninkov√©ho pl√°nu
            </Typography>
            <Typography variant="body1" whiteSpace="pre-line">
              {evaluation}
            </Typography>
          </Paper>
        )}

        {suggestion && (
          console.log('trainings data',{trainings}),
          console.log('suggestion data',{suggestion}),
          <>
            <Paper elevation={3} sx={{ p: 3, mt: 4 }}>
              <Typography variant="h6" gutterBottom>
                ‚ú® N√°vrh nov√©ho tr√©ninkov√©ho pl√°nu
              </Typography>
              <TableContainer component={Paper} sx={{ mt: 2 }}>
                <Table>
                  <TableHead>
                    <TableRow>
                      <TableCell>Den</TableCell>
                      <TableCell>R√°no</TableCell>
                      <TableCell>Hlavn√≠ aktivita</TableCell>
                      <TableCell>Veƒçer</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {Object.entries(suggestion).map(([day, trainings]: any) => (
                      <TableRow key={day}>
                        <TableCell>{day}</TableCell>
                        <TableCell>{trainings.morning || "-"}</TableCell>
                        <TableCell>{trainings.main || "-"}</TableCell>
                        <TableCell>{trainings.evening || "-"}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>
            </Paper>

            <Box display="flex" justifyContent="flex-end" mt={3}>
              <Button
                variant="contained"
                color="success"
                onClick={() => {
                  trainingCalendarRef.current?.applySuggestion(suggestion);
                }}
              >
                ‚úÖ Pou≈æ√≠t n√°vrh tr√©ninku
              </Button>
            </Box>
          </>
        )}
      </Box>
      <Divider sx={{ my: 3 }} />
    </Container>
  );
};

export default Training;
